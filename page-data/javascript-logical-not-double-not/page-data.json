{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript-logical-not-double-not/","result":{"data":{"site":{"siteMetadata":{"title":"What I Thought","description":"@keensyoのブログです。"}},"markdownRemark":{"id":"f64c553a-34f8-55f3-bbe7-f44bc6d8326a","excerpt":"プロジェクトのコードで、以下のような表現を見かけた。\nなお、記事タイトルは JavaScript と書いたが、実際に見かけたのは TypeSctipt だったためサンプルコードは TypeScript で書く。 普通の getter だが、&&の後ろに!!（エクスクラメーションマーク/はてなマーク）が…","html":"<p>プロジェクトのコードで、以下のような表現を見かけた。</br>\nなお、記事タイトルは JavaScript と書いたが、実際に見かけたのは TypeSctipt だったためサンプルコードは TypeScript で書く。</br></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">get</span> <span class=\"token function\">fooStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> bar<span class=\"token punctuation\">.</span>state <span class=\"token operator\">===</span> <span class=\"token constant\">GOOD</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>baz<span class=\"token punctuation\">.</span>result<span class=\"token operator\">?.</span>id\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>普通の getter だが、&#x26;&#x26;の後ろに!!（エクスクラメーションマーク/はてなマーク）が 2 つ並んでいる。</br>\nどうやら baz のプロパティにアクセスするとき、undefined が返ってくる可能性があるよと TypeScript の静的解析チェックに引っかかり、その回避として!!を付けているようだった。</br>\nここまでで、baz.result?.id はこの文脈においては必ず値が返ってくること、!!は値が返ってくることを保証する機能があることがわかった（推測できた）。</br></p>\n<p>これでおしまいにしてしまうのはモヤモヤが残るので、公式に、あるいは確かな情報筋に解説を求めた。</br>\n調べたところ、機能としては JavaScript における論理否定（Logical NOT）の一部で、二重否定（Double NOT）と呼ばれるものであった。</br>\n確かな情報筋としては<a href=\"https://jsprimer.net/basic/operator/#not-operator\">JavaScript Primer</a>と<a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Logical_NOT\">MDN</a>に言及があった。</br>\n使いどころとしては、NOT 演算子（!）が真偽値を必ず返すことを利用しこれを重ねて使うことで対象のオブジェクトを真偽値に変換してしまうというもの。</br>\nやや強引な使い方のように聞こえるが、型変換としてはシンプルに書けるので使っている人は多そうである。</br></p>\n<p>余談だが、今回の調査は結構骨が折れた。</br>\nというのも、!!をそれっぽくググってもなかなか検索結果に出てこない。</br>\n特に「TypeScript !!」みたいに適当にググったところで、せいぜい非 null アサーション演算子（Non-null assertion operator）の話が引っかかる程度で全く核心に近づかない。</br>\n見た目だけで言えば、Null 合体演算子（Nullish coalescing operator）っぽいため、ひょっとしてこれの仲間なのか…？などという不毛な時間を過ごした。</br>\n半ば諦めムードのところで、やけくそ気味に「JavaScript !! 2 つ」のように検索したところ、いろんな方が二重否定であるという内容のブログを書いていてくれており、ようやく解消の道が開けた。</br>\n素朴な検索の仕方を念頭に置いてくれた記事達だったのか、とにかく大変助けられた。</br>\nもっと冷静に考えて、!で論理否定なのだからこの論理否定が書かれた MDN の記事などをきちんと追っていくことをすればよかった。</br>\nざっと見ていると見落としてしまう表記だなとは思いつつも、書かれている記事がある以上は探しようがあったなと少し反省した。</br></p>","frontmatter":{"title":"JavaScriptの論理否定（!）と二重否定（!!）","date":"September 04, 2022"}},"previous":{"fields":{"slug":"/controll-fazy/"},"frontmatter":{"title":"曖昧さとその対応"}},"next":null},"pageContext":{"id":"f64c553a-34f8-55f3-bbe7-f44bc6d8326a","previousPostId":"52111cfb-e423-5f85-b4f2-3b61e914129d","nextPostId":null}},"staticQueryHashes":["2841359383"]}