{"componentChunkName":"component---src-templates-blog-post-js","path":"/review-the-first-half-of-2021/","result":{"data":{"site":{"siteMetadata":{"title":"What I Thought","description":"@keensyoのブログです。"}},"markdownRemark":{"id":"685dc08a-61f7-5940-a7b9-15ecb8a14bfa","excerpt":"2021 年 5 月にソフトウェアエンジニアのロールになった。\nまだギリギリ…","html":"<p>2021 年 5 月にソフトウェアエンジニアのロールになった。</br>\nまだギリギリ 6 ヶ月は経っていないけど、この半年がどうだったかを振り返る。</br></p>\n<h3>やったこと（全体編）</h3>\n<p>業務システムを継続改善するチームで、バグから要望まで、フロントエンドからバックエンドまで一通り開発した。</br></p>\n<ul>\n<li>要望を要件に落とし込む</li>\n<li>設計方針を議論し実装する</li>\n<li>テストを書く</li>\n<li>手動でテストをやる</li>\n<li>設計書を修正する</li>\n<li>すべて OK になったらリリースチームにブランチをマージしてもらう</li>\n</ul>\n<p>ごくごく普通のことをやっていたと思う。</br>\n少し特殊だったのが、ひとつの課題（チケット）をチームメンバー全員で取り組むこと。</br>\n具体的な進め方としてモブプログラミング（リモート）を導入し、実践してきたことだった。</br>\n結果的に、このやり方はいまのところうまくいっている。</br>\nリリース頻度は下がっておらず、ローカルルールにひとりでハマることはほぼ無くなった。</br>\nその課題について一番よくわかっているのが自分だけでなく、他のメンバーも同じくらいよく知っているという状況は、精神的にも負荷が軽い。</br></p>\n<h3>やったこと（個人編）</h3>\n<p>仕事的には上記の通りで、これらをやるために個人として何をやったかを振り返る。</br></p>\n<ul>\n<li>C#のキャッチアップ</li>\n<li>Angular、RxJS のキャッチアップ</li>\n<li>JavaScript、TypeScript のキャッチアップ</li>\n</ul>\n<p>とにかく勉強してました、という半年だった。</br>\nとくにフロントエンドは知っておかないといけないことが幅広く、いまも結構苦労している。</br>\nC#は正直なところ、仕事以外で触れるモチベーションが湧かず、フロントエンドの大変さにかまかけて最近はあまりやれていない。</br>\nC#は<a href=\"https://amzn.to/3jjNyKQ\">本</a>で一通り総ざらいし、あとは<a href=\"https://ufcpp.net/study/csharp/\">ブログ</a>にもお世話になった。</br>\nAngular は<a href=\"https://angular.jp/tutorial\">公式チュートリアル</a>、あとは<a href=\"https://www.udemy.com/course/angular-ja/\">Udemy</a>を会社で受けられたのでこの前完走した。</br>\n<a href=\"https://qiita.com/seteen/items/43908e33e08a39612a07\">この記事</a>も教えてもらったので、Firebase でのデプロイ前ぐらいまでは手を動かした。</br>\nRxJS はいろいろな記事を読んだけど、どれも今の自分には難しく感じた。</br>\n<a href=\"https://tech.recruit-mp.co.jp/front-end/rxjs-intro/\">このシリーズ</a>は体系的で、サンプルコードも充実していてよかった。</br>\nあとは<a href=\"https://qiita.com/agajo/items/7942743a0130f7a0f30b\">基礎中の基礎</a>も勉強になった。</br>\n<a href=\"https://qiita.com/Sekky0905/items/93bd4804a2003ed0aa8d\">同じような記事</a>もあり、こっちも比較的わかりやすかった。</br>\n結局のところ、JavaScript の非同期処理とは？ということを<a href=\"https://jsprimer.net/\">JSPrimer</a>で勉強したのが効いた気がする。</br>\nJavaScript は JSPrimer と<a href=\"https://developer.mozilla.org/ja/docs/Learn/Getting_started_with_the_web\">MDN</a>が素晴らしく、いまも助けられている。</br>\nTypeScript は<a href=\"https://book.yyts.org\">サバイバル TypeScript</a>、<a href=\"https://future-architect.github.io/typescript-guide/index.html\">仕事ですぐに使える TypeScript</a>あたりを使って勉強した。</br></p>\n<p>全体的にキャッチアップ中ではあるんだけど、やろうと思えば一生キャッチアップできるのでそろそろこの単語を使うのはやめようと思う。</br></p>\n<h3>見直したい点</h3>\n<p>おおむね良かったとは思っている。あまり自由な時間を取りづらくても最大限努力できたと思う。</br>\n一方で、半年前の想定と比べて試行錯誤して設計しコードを書くことが大きく減っていることに危機感を抱いている。</br>\n原因はモブプログラミングと対応チケットの性質と捉えている。</br>\n前者は、試行錯誤というプロセスを無くしてしまった。</br>\n本来ならば初学者は、ある程度苦しみながら設計を考えどうやってコードで表現するのか、に一番時間を使わなくてはならない。</br>\nそれが、モブプログラミングだと集合知となるのでゴールに辿り着きやすく、加えてコードを書くことは順番制なので手で覚えることが難しくなっている。</br>\nチーム視点でみると、成果は出ているので問題ないものの個人の地力はその限りではないと感じるのが大きな課題であり不安要素である。</br>\n対応チケットの性質は、工数が大きすぎない（目安として 1 人月）ものでありその結果、単発の改修やバグ対応になる。</br>\nそのため、難易度もすごい高いわけでなく、ほとんどは改修のみとなるため、イチから経験するということは叶えにくい。</br></p>\n<h3>まとめ</h3>\n<p>とにかく前進あるのみで、チャンスを掴めるときは掴みに行くことを考えたい。</p>","frontmatter":{"title":"職業プログラマーになって半年の振り返り","date":"October 20, 2021"}},"previous":{"fields":{"slug":"/not-understand-nvm/"},"frontmatter":{"title":"nvmでインストールしたNode.jsに同梱されるnpmのバージョンを変更したい"}},"next":null},"pageContext":{"id":"685dc08a-61f7-5940-a7b9-15ecb8a14bfa","previousPostId":"5784e4a7-3d16-5d4c-908c-cf291bce9b49","nextPostId":null}},"staticQueryHashes":["2841359383"]}